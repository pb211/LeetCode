package graph;

import java.util.Arrays;
import java.util.Stack;
public class P785_BipartiteGraph {
	public static void main(String args[]){
		int[][] graph={{1,3},{0,2},{1,3},{0,2}};
		boolean res=isBipartite(graph);
		System.out.println(res);
	}
	 
    public static boolean isBipartite(int[][] graph) {
        int n = graph.length;
      //使用数组记录每个节点的颜色color[node],颜色可以是 0， 1，或者未着色-1
        int[] color = new int[n];
        //先用-1填充满color
        Arrays.fill(color, -1);
        //搜索节点时，需要考虑图是非连通的情况。对每个未着色节点遍历。每个邻接点都可以通过当前节点着相反的颜色。
        for (int start = 0; start < n; ++start) {
            if (color[start] == -1) {
            	//使用栈完成深度优先搜索，存储着下一个要访问节点的顺序
                Stack<Integer> stack = new Stack();
                stack.push(start);
                color[start] = 0;

                while (!stack.empty()) {
                    Integer node = stack.pop();
                    //在 graph[node] 中，对每个未着色邻接点，着色该节点并将其放入到栈中。
                    for (int nei: graph[node]) {
                        if (color[nei] == -1) {
                            stack.push(nei);
                            color[nei] = color[node] ^ 1;//还未染色的话，把该值去另外一个值,这里是异或运算，二进制位相同为0不同为1
                        } else if (color[nei] == color[node]) {//如果存在当前点和邻接点颜色相同即值相同，着色失败
                            return false;
                        }
                    }
                }
            }
        }

        return true;
    }
}
