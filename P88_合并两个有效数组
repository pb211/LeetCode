package arr;

import java.util.Arrays;

public class hebing {
	public static void main(String[] args) {
		int[] nums1 = {1, 2, 3, 0, 0, 0};
		int[] nums2 = {2, 5, 6};
		merge3(nums1, 3, nums2, 3);
	}
	  //直接合并在排序
	public static void merge1(int[] nums1, int m, int[] nums2, int n) {
		System.arraycopy(nums2, 0, nums1, m, n);
		Arrays.sort(nums1);
	}
	//双指针法
	//将指针p1 置为 nums1的开头， p2为 nums2的开头，在每一步将最小值放入输出数组中。
	//nums1 用于输出的数组，将nums1中的前m个元素放在其他地方
	public static void merge2(int[] nums1, int m, int[] nums2, int n) {
	    // 复制一个nums1
	    int [] nums1_copy = new int[m];
	    System.arraycopy(nums1, 0, nums1_copy, 0, m);
	    // 两个获取指针nums1 copy和nums2。
	    int p1 = 0;
	    int p2 = 0;
	    // 设置指针为nums1
	    int p = 0;
	    // 比较nums1 copy和nums2中的元素
	    // 然后把最小的那个加到nums1中。
	    while ((p1 < m) && (p2 < n))
	      nums1[p++] = (nums1_copy[p1] < nums2[p2]) ? nums1_copy[p1++] : nums2[p2++];
	    // 如果还有要添加的元素
	    if (p1 < m)
	      System.arraycopy(nums1_copy, p1, nums1, p1 + p2, m + n - p1 - p2);
	    if (p2 < n)
	      System.arraycopy(nums2, p2, nums1, p1 + p2, m + n - p1 - p2);
	}

	public static void merge3(int[] nums1, int m, int[] nums2, int n) {
	    // 两个获取指针nums1和nums2
	    int p1 = m - 1;
	    int p2 = n - 1;
	    // 设置指针为nums1
	    int p = m + n - 1;
	    // 还有可供比较的元素时
	    while ((p1 >= 0) && (p2 >= 0))
	      // 比较nums1和nums2中的两个元素
	      //  然后在nums1中加上最大的那个
	      nums1[p--] = (nums1[p1] < nums2[p2]) ? nums2[p2--] : nums1[p1--];
	    // 从nums2中添加丢失的元素
	    System.arraycopy(nums2, 0, nums1, 0, p2 + 1);
	  }


}
