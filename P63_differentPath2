
public class P63_differentPath2 {
	public static void main(String[] args) {
		P63_differentPath2 p=new P63_differentPath2();
		int[][] nums={
			{0,0,0},
			{0,1,0},
			{0,0,0}
		};
		int res = p.uniquePathsWithObstacles(nums);
		System.out.println(res);
    }
	 public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int R = obstacleGrid.length;
        int C = obstacleGrid[0].length;
        // 如果开始的单元有一个障碍，然后简单地返回，因为没有路径可以到达目的地。
        if (obstacleGrid[0][0] == 1) {
            return 0;
        }
        // 到达起始单元格的方法数为1
        obstacleGrid[0][0] = 1;
        // 填充第一列的值
        for (int i = 1; i < R; i++) {
            obstacleGrid[i][0] = (obstacleGrid[i][0] == 0 && obstacleGrid[i - 1][0] == 1) ? 1 : 0;
        }
        //填充第一行的值
        for (int i = 1; i < C; i++) {
            obstacleGrid[0][i] = (obstacleGrid[0][i] == 0 && obstacleGrid[0][i - 1] == 1) ? 1 : 0;
        }
        // 从单元格(1,1)开始填充值
        // 没有办法到达 cell[i][j] = cell[i - 1][j] + cell[i][j - 1]
        // i.e.也就是从左上方。
        for (int i = 1; i < R; i++) {
            for (int j = 1; j < C; j++) {
                if (obstacleGrid[i][j] == 0) {
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];
                } else {
                    obstacleGrid[i][j] = 0;
                }
            }
        }
        // 返回值存储在最右边最下面的单元格中，就是结果。
        return obstacleGrid[R - 1][C - 1];
    }

}
