package HashSet;

public class p169_MajorityElement {
	 public static void main(String[] args) {
	        int[] nums = {2, 2, 1, 1, 1, 2, 2};
	        int res = majorityElement(nums);
	        System.out.println("res = " + res);
	    }
	 private static int countInRange(int[] nums, int num, int lo, int hi) {
	        int count = 0;
	        for (int i = lo; i <= hi; i++) {
	            if (nums[i] == num) {
	                count++;
	            }
	        }
	        return count;
	    }

	    private static int majorityElementRec(int[] nums, int lo, int hi) {
	        // 基本情况;数组大小为1的唯一元素是多数元素
	        // 原理
	        if (lo == hi) {
	            return nums[lo];
	        }

	        //递归在这个切片的左右半部分。
	        int mid = (hi-lo)/2 + lo;
	        int left = majorityElementRec(nums, lo, mid);
	        int right = majorityElementRec(nums, mid+1, hi);

	        // 如果双方众数相同，返回它。
	        if (left == right) {
	            return left;
	        }

	        // 否则，计算每个元素并返回数量多的
	        int leftCount = countInRange(nums, left, lo, hi);
	        int rightCount = countInRange(nums, right, lo, hi);

	        return leftCount > rightCount ? left : right;
	    }

	    public static int majorityElement(int[] nums) {
	        return majorityElementRec(nums, 0, nums.length-1);
	    }

}
